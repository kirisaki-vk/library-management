openapi: 3.0.3
info:
  title: Library API
  version: 1.8.0
  description: STD22081
servers:
  - url: https://library.com
tags:
  - name: "Authors"
    description: "Authors related endpoints"
  - name: "Books"
    description: "Books related endpoints"
  - name: "Topics"
    description: "Topics related endpoints"

paths:
#### BOOKS
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBooks'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      operationId: addAuthor
      summary: "Add an author to a book"
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        200:
          description: "A book with the author it's attached to"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

  /books/authors:
    put:
      tags:
        - "Books"
      operationId: addAuthors
      summary: "Add some authors to some books"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: "A list of the updated books"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  
  /book/page/{pageNumber}/size/{pageSize}:
    get:
      tags:
        - "Books"
      summary: "Get a book on a given page of a given size"   
      operationId: getPagedBooks
      parameters:
        - $ref: "#/components/parameters/pageNumberPath"
        - $ref: "#/components/parameters/pageSizePath"
        # - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          description: "A list of queried books given on the parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  
  /books/topics:
    put:
      tags:
        - "Books"
      summary: "Add a some topics to some books"
      operationId: addTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"

      responses:
        200:
          description: "A list of updated books"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  
  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - "Books"
      summary: "Add a topic to a given book"
      operationId: addTopic
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          required: true
          schema:
            type: string
      
      responses:
        200:
          description: "The given book with it's topic"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Book"


#### AUTHOR  
  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Get all authors will be ordered by name descending by default
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          schema:
            type: string
      responses:
        200:
          description: A list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      tags:
        - "Authors"
      summary: Create or Update an Author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    delete:
      tags:
        - "Authors"
      summary: Delete some Authors
      operationId: deleteAuthor
      requestBody:
        description: "An array of authorIds that will be deleted"
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "authorId"

      responses:
        200:
          description: A list of the deleted Authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  
  /authors/{authorId}:
    delete:
      tags:
        - "Authors"
      summary: Delete one author
      operationId: deleteAuthors
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Responds by the deleted author"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"

  /authors/page/{pageNumber}/size/{pageSize}:
    get:
      tags:
        - "Authors"
      summary: "Get an Auhtor on a given page on a given size"
      description: |
        "If `authorName` is provided, then it will return a paginated list of authors filtered by the given name
        else it will return a paginated list of all authors"
      operationId: getPagedAuthors
      parameters:
        - in: query
          name: authorName
          schema:
            type: string
          allowEmptyValue: true
        - $ref: "#/components/parameters/pageNumberQuery"
        - $ref: "#/components/parameters/pageSizeQuery"
        # - $ref: "#/components/parameters/queryPagination"
      responses:
        200:
          description: "A list of queried Author with the given parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  
  /authorTopics:
    get:
      tags:
        - "Authors"
      summary: "Show a list of topics of a given author"
      parameters:
        - in: query
          name: authorId
          schema:
            type: string
          required: true
      responses:
        200:
          description: "The author with it's topics"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorTopic"
                
#### TOPICS
  /topics:
    get:
      tags:
        - "Topics"
      summary: "Get a list of topics"
      description: |
        "If `name` parameter is not provided, it will return all available topics
        or it will returned topic filtered by the given name"
      parameters:
        - in: query
          name: name
          schema:
            type: string
      responses:
        200:
          description: "A list of queried topics"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"

    put:
      tags:
        - "Topics"
      summary: "Create or Update a Topic"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        200:
          description: "The created or update topic"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"

    delete:
      tags:
        - "Topics"
      summary: "Delete a topic"
      parameters:
        - in: query
          name: topicId
          required: true
          schema:
            type: string
      responses:
        200:
          description: "The deleted author"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
      
components:
  parameters:
    pageSizePath:
      in: path
      name: pageSize
      schema:
        type: integer
        default: 50
      required: true

    pageNumberPath:
      in: path
      name: pageNumber
      schema:
        type: integer
        default: 1
      required: true
    
    pathPagination:
      name: pathPaginantion
      in: path
      required: true
      schema:
        type: object
        properties: 
          pageSize:
            type: number
            default: 50
            # $ref: "#/components/parameters/pageSizePath"
          pageNumber: 
            type: number
            default: 1
            # $ref: "#/components/parameters/pageNumberPath"
          
    pageSizeQuery:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 50
      required: true
    pageNumberQuery:
      name: pageNumber
      in: query
      schema:
        type: integer
        default: 1
      required: true
    
    queryPagination:
      name: queryPagination
      in: query
      schema:
        type: object
        properties:
          pageSize:
            type: integer
            default: 50
            # $ref: "#/components/parameters/pageSizeQuery"
          pageNumber:
            type: integer
            default: 1
            # $ref: "#/components/parameters/pageNumberQuery"

  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBooks"
      properties:
        author:
          type: object
          $ref: "#/components/schemas/Author"
        topic:
          type: object
          $ref: "#/components/schemas/Topic"

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    
    CrupdateBooks:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: dat
        
    UpdateBookAuthor:
      type: array
      items:
        type: object
        $ref: "#/components/schemas/BookAuthor"
    
    UpdateBookTopic:
      type: array
      items:
        type: object
        $ref: "#/components/schemas/BookTopic"
        
    BookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - bookId
        - authorId
    
    BookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId:
          type: string
      required:
        - "bookId"
        - "topicId"
    
    Topic:
      type: object
      properties:
        id: 
          type: string
        topic:
          type: string
          enum:
          - ROMANCE
          - COMEDY
          - OTHER
    
    AuthorTopic:
      type: object
      allOf:
        - $ref: "#/components/schemas/Author"
      properties:
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"