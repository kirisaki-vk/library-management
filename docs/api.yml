openapi: 3.0.3
info:
  title: Library API
  version: 1.1.1
  description: STD22081
servers:
  - url: https://library.com
paths:
#### BOOKS
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBooks'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  
  /books/{bookId}/authors/{authorId}:
    put:
      operationId: addAuthor
      summary: "Add an author to a book"
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        200:
          description: "A book with the author it's attached to"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

  /books/authors:
    put:
      operationId: addAuthors
      summary: "Add some authors to some books"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: "A list of the updated books"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  
  /book/page/{page}/size/{size}:
    get:
      summary: "Get a book on a given page of a given size"   
      operationId: getPagedBooks
      parameters:
        - in: path
          required: false
          name: page
          schema:
            type: integer
            default: 1
        - in: path
          required: false
          name: size
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: "A list of queried books given on the parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

#### AUTHOR  
  /authors:
    get:
      summary: Get all authors
      description: Get all authors will be ordered by name descending by default
      operationId: getAuthors
      parameters:
        - in: query
          required: false
          name: authorName
          schema:
            type: string
      responses:
        200:
          description: A list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      summary: Create or Update an Author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    delete:
      summary: Delete an Author
      operationId: deleteAuthor
      parameters:
        - in: query
          required: true
          name: authorID
          schema:
            type: string

      responses:
        200:
          description: The deleted Author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
 
  /authors/page/{page}/size/{size}:
    get:
      summary: "Get an Auhtor on a given page on a given size"
      operationId: getPagedAuthors
      parameters:
        - in: path
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: path
          name: size
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: "A list of queried Author with the given parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        
components:
  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBooks"
      properties:
        author:
          type: object
          $ref: "#/components/schemas/Author"

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    
    CrupdateBooks:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: dat
        
    UpdateBookAuthor:
      type: array
      items:
        type: object
        $ref: "#/components/schemas/BookAuthor"
        
    BookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - bookId
        - authorId
    