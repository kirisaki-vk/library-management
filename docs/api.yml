openapi: 3.0.3
info:
  title: Library API
  version: 1.14.0
  description: STD22081
servers:
  - url: https://library.com
tags:
  - name: "Authors"
    description: "Authors related endpoints"
  - name: "Books"
    description: "Books related endpoints"
  - name: "Topics"
    description: "Topics related endpoints"
  - name: "Visitor"
    description: "Visitor related endpoints"

paths:
#### BOOKS
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: available
          description: |
            If `true` it will provide all available books with all matching parameters,
            if  `false` it will return all borrowed books,
            if it's blank or not provided it will return all books no matter it's availability
          schema:
            type: boolean
          allowEmptyValue: true

      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBooks'
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      operationId: addAuthor
      summary: "Add an author to a book"
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "A book with the author it's attached to"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /books/authors:
    put:
      tags:
        - "Books"
      operationId: addAuthors
      summary: "Add some authors to some books"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        '200':
          description: "A list of the updated books"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /book/page/{pageNumber}/size/{pageSize}:
    get:
      tags:
        - "Books"
      summary: "Get a book on a given page of a given size"   
      operationId: getPagedBooks
      parameters:
        - $ref: "#/components/parameters/pageNumberPath"
        - $ref: "#/components/parameters/pageSizePath"
        # - $ref: "#/components/parameters/pathPagination"
      responses:
        '200':
          description: "A list of queried books given on the parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /books/info/{bookId}:
    get:
      tags:
        - "Books"
      summary: Get info of a specific book
      description: |
         This endpoint displays informations about a book, 
         It will display if the specified book is available or not
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Informations about the book
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Book"
                type: object
                properties:
                  available:
                    type: boolean
        
  /books/topics:
    put:
      tags:
        - "Books"
      summary: "Add a some topics to some books"
      operationId: addTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"

      responses:
        '200':
          description: "A list of updated books"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - "Books"
      summary: "Add a topic to a given book"
      operationId: addTopic
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: "The given book with it's topic"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /books/import:
    post:
      tags:
        - "Books"
      summary: "Import a list of book information"
      description: |
        "The list can be posted in `application/json` fromat 
        or in `application/ms-excel`"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BooksImport"

          application/ms-excel:
            schema:
              $ref: "#/components/schemas/BooksImport"

      responses:
        '200':
          description: "A list of intserted Books"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooksImport"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /books/borrow/{visitorId}:
    post:
      tags:
        - "Books"
      summary: Borrow a book
      description: "Make a book borrowed by the specified visitor"
      operationId: borrowBook
      parameters:
        - in: path
          name: visitorId
          schema:
            type: string
          required: true
        - in: query
          required: true
          description: Contains an array of bookId or only one bookId to be borrowed
          name: bookId
          schema:
            oneOf:
              - type: array
                items:
                  type: string
              - type: string
      responses:
        '200':
          description: "A list of users borrowed book"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BorrowList"

  /books/render/{visitorId}:
    post:
      tags:
        - "Books"
      summary: Render a book
      description: "Make a book rendered by a specified visitor"
      parameters:
        - in: path
          name: visitorId
          schema:
            type: string
          required: true
        - in: query
          required: true
          description: Contains an array of bookId or only one bookId to be rendered
          name: bookId
          schema:
            oneOf:
              - type: array
                items:
                  type: string
              - type: string
      responses:
        '200':
          description: "A list of users borrowed book"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenderList"

  #### AUTHOR
  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Get all authors will be ordered by name descending by default
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          schema:
            type: string
      responses:
        '200':
          description: A list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Authors"
      summary: Create or Update an Author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        '200':
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    delete:
      tags:
        - "Authors"
      summary: Delete some Authors
      operationId: deleteAuthor
      requestBody:
        description: "An array of authorIds that will be deleted"
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "authorId"

      responses:
        '200':
          description: A list of the deleted Authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /authors/{authorId}:
    delete:
      tags:
        - "Authors"
      summary: Delete one author
      operationId: deleteAuthors
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Responds by the deleted author"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /authors/page/{pageNumber}/size/{pageSize}:
    get:
      tags:
        - "Authors"
      summary: "Get an Auhtor on a given page on a given size"
      description: |
        "If `authorName` is provided, then it will return a paginated list of authors filtered by the given name
        else it will return a paginated list of all authors"
      operationId: getPagedAuthors
      parameters:
        - in: query
          name: authorName
          schema:
            type: string
          allowEmptyValue: true
        - in: path
          name: pageNumber
          required: true
          schema:
            allOf:
              - $ref: "#/components/parameters/pageNumberQuery"
        - in: path
          name: pageSize
          required: true
          schema:
            allOf:
              - $ref: "#/components/parameters/pageSizeQuery"
          # - $ref: "#/components/parameters/queryPagination"
      responses:
        '200':
          description: "A list of queried Author with the given parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /authorTopics:
    get:
      tags:
        - "Authors"
      summary: "Show a list of topics of a given author"
      parameters:
        - in: query
          name: authorId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "The author with it's topics"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorTopic"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  
  /authors/import:
    post:
      tags:
        - "Authors"
      summary: "Import a list of Authors"
      description: |
        "The list can be posted in `application/json` fromat 
        or in `application/ms-excel`"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorImport"

          application/ms-excel:
            schema:
              $ref: "#/components/schemas/AuthorImport"

      responses:
        '200':
          description: "A list of intserted Authors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorImport"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
                 
#### TOPICS
  /topics:
    get:
      tags:
        - "Topics"
      summary: "Get a list of topics"
      description: |
        "If `name` parameter is not provided, it will return all available topics
        or it will returned topic filtered by the given name"
      parameters:
        - in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          description: "A list of queried topics"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    put:
      tags:
        - "Topics"
      summary: "Create or Update a Topic"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        '200':
          description: "The created or update topic"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    delete:
      tags:
        - "Topics"
      summary: "Delete a topic"
      parameters:
        - in: query
          name: topicId
          required: true
          schema:
            type: string
      responses:
        200:
          description: "The deleted author"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"

#### VISITOR
  /visitor:
    get:
      tags:
        - "Visitor"
      summary: Get all list of visitors
      description: "Will be ordered by name desc"
      parameters:
        - in: query
          name: name
          description: "Will filter visitors by matching name"
          schema:
            type: string
      responses:
        '200':
          description: "A list of visitor matching the request"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Visitor"
    put:
      tags:
        - "Visitor"
      summary: Crupdate a Visitor
      description: "Create or update a visitor"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Visitor"
                - $ref: "#/components/schemas/CrupdateVisitor"
      responses:
        '200':
          description: "The modified or added Visitor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visitor"

    delete:
      tags:
        - "Visitor"
      summary: Delete one or some visitor
      parameters:
        - in: query
          required: true
          name: visitorId
          schema:
            oneOf:
              - type: array
                description: An array of visitorIds to be deleted
                items:
                  type: string
              - type: string
                description: A visitor id to be deleted

      responses:
        '200':
          description: "A list of deleted visitor or the deleted visitor"
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/Visitor"
                  - $ref: "#/components/schemas/Visitor"

  /visitor/{visitorId}/info:
    get:
      tags:
        - "Visitors"
      summary: Show info about a visitor
      description: |
        Show informations about a visitor 
        and about his activity (borrows and renders)
      parameters:
        - in: path
          name: visitorId
          description: VisitorId to get info about
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: |
            This parameter will filter activities (borrows and render) by the specified
            start timestamp
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          description: |
            This parameter will filter activities (borrows and render) by the specified
            end timestamp
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: "Display specified visitor information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VisitorInfo"

components:
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
      
  parameters:
    pageSizePath:
      in: path
      name: pageSize
      schema:
        type: integer
        default: 50
      required: true

    pageNumberPath:
      in: path
      name: pageNumber
      schema:
        type: integer
        default: 1
      required: true
    
    pathPagination:
      name: pathPaginantion
      in: path
      required: true
      schema:
        type: object
        properties: 
          pageSize:
            type: number
            default: 50
            # $ref: "#/components/parameters/pageSizePath"
          pageNumber: 
            type: number
            default: 1
            # $ref: "#/components/parameters/pageNumberPath"
          
    pageSizeQuery:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 50
      required: true
    pageNumberQuery:
      name: pageNumber
      in: query
      schema:
        type: integer
        default: 1
      required: true
    
    queryPagination:
      name: queryPagination
      in: query
      schema:
        type: object
        properties:
          pageSize:
            type: integer
            default: 50
            # $ref: "#/components/parameters/pageSizeQuery"
          pageNumber:
            type: integer
            default: 1
            # $ref: "#/components/parameters/pageNumberQuery"

  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBooks"
      properties:
        id:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        topic:
          $ref: "#/components/schemas/Topic"

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    
    CrupdateBooks:
      type: object
      properties:
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: dat
        
    UpdateBookAuthor:
      type: array
      items:
        $ref: "#/components/schemas/BookAuthor"
    
    UpdateBookTopic:
      type: array
      items:
        $ref: "#/components/schemas/BookTopic"
        
    BookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - bookId
        - authorId
    
    BookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId:
          type: string
      required:
        - "bookId"
        - "topicId"
    
    Topic:
      type: object
      properties:
        id: 
          type: string
        topic:
          type: string
          enum:
          - ROMANCE
          - COMEDY
          - OTHER
    
    AuthorTopic:
      type: object
      allOf:
        - $ref: "#/components/schemas/Author"
      properties:
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error

    BooksImport:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/CrupdateBooks"
        properties:
          author: 
            $ref: "#/components/schemas/Author"
          authorId:
            $ref: "#/components/schemas/Author/properties/id"

    Borrow:
      type: object
      properties:
        id:
          type: string
        bookId:
          type: string
        visitorId:
          type: string
        borrowDate:
          type: string
          format: date-time


    BorrowList:
      type: array
      items:
        $ref: "#/components/schemas/Borrow"
    Render:
      type: object
      properties:
        id:
          type: integer
        bookId:
          type: string
        visitorId:
          type: string
        renderDate:
          type: string
          format: date-time
    RenderList:
      type: array
      items:
        $ref: "#/components/schemas/Render"
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: object

    AuthorImport:
      type: array
      items:
        type: object
        properties:
          authorName: 
            $ref: "#/components/schemas/Author/properties/name"
          sex:
            $ref: "#/components/schemas/Author/properties/id"  